# -*- coding: utf-8 -*-
"""Chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SCb3lbRwKNVHqVO21mFEErfw3rX7QWoY

# You need to use the T4 gpu (free tier) or any GPU option to use the chatbot
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install colab-xterm # https://pypi.org/project/colab-xterm/
# %load_ext colabxterm

!pip install colab-xterm -qqq
!pip install langchain -qqq
!pip install langchain_community -qqq
!pip install langchain faiss-cpu sentence-transformers
!pip -q install llama-index llama-index-embeddings-huggingface llama-index-llms-llama-cpp pypdf
!CMAKE_ARGS="-DLLAMA_CUBLAS=on" FORCE_CMAKE=1 pip -q install llama-cpp-python
!pip install chromadb
!pip install streamlit ngrok -qqq
!pip install pyngrok

# Commented out IPython magic to ensure Python compatibility.
# %load_ext colabxterm
# %xterm

# When content appear write "curl -fsSL https://ollama.com/install.sh | sh"
# The next command is "ollama serve & ollama pull llama3.1"
# You may have to run ollama pull llama3.1 a second time by typing CTRL-c to stop the command and then use right click insert to use the previous command again

# Import Ollama module from Langchain
from langchain_community.llms import Ollama

# Initialize an instance of the Ollama model
llm = Ollama(model="llama3.1")
# Invoke the model to generate responses
response = llm.invoke("What is the capital of Denmark?")
print(response)

"""# You need to upload a document in the files/filer tab to test the LLM model"""

from langchain_community.llms import Ollama
from langchain.chains import RetrievalQA
from langchain.vectorstores import Chroma
from sentence_transformers import SentenceTransformer
from langchain.embeddings import SentenceTransformerEmbeddings
from langchain.text_splitter import CharacterTextSplitter
from langchain.docstore.document import Document
from llama_index.core import Prompt, StorageContext, load_index_from_storage, Settings, VectorStoreIndex, SimpleDirectoryReader, set_global_tokenizer
import os
import time

# Initialize the Llama 3 model
llm = Ollama(model="llama3.1")

# Create an embedding model
embeddings = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")

# Prepare documents
pdf_path = '/content/wiki.pdf'
filename_fn = lambda filename: {'file_name': os.path.basename(pdf_path)}
loader = SimpleDirectoryReader(input_files=[pdf_path], file_metadata=filename_fn)
documents = loader.load_data()

# Convert documents to the required format
texts = [doc.text for doc in documents]  # Assuming the content is in `text` attribute
metadatas = [doc.metadata for doc in documents]

# Create Chroma vector store
vector_store = Chroma.from_texts(texts=texts, metadatas=metadatas, embedding=embeddings)

# Load the QA chain
qa_chain = RetrievalQA.from_chain_type(
    llm=llm,
    chain_type="stuff",
    retriever=vector_store.as_retriever()
)

queries = [
    "What is the Danish Refugee Council?",
    "Who is the Secretary General of the Danish Refugee Council?",
    "What are the key activities of the Danish Refugee Council?",
    "What was the Danish Refugee Council's role in Syria?"
]

for query in queries:
    response = qa_chain.run(query)
    print(f"Query: {query}\nResponse: {response}\n")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import time
# from langchain_community.llms import Ollama
# from langchain.chains import RetrievalQA
# from langchain.vectorstores import Chroma
# from sentence_transformers import SentenceTransformer
# from langchain.embeddings import SentenceTransformerEmbeddings
# from llama_index.core import SimpleDirectoryReader
# # Set up the Streamlit interface
# st.title("DRC24/7")
# 
# # Initialize session state for chat history
# if 'messages' not in st.session_state:
#     st.session_state.messages = []
# 
# # Upload PDF
# uploaded_file = st.file_uploader("Upload a PDF file", type="pdf")
# 
# if uploaded_file is not None:
#     # Initialize the Llama 3 model
#     llm = Ollama(model="llama3.1")
# 
#     # Create an embedding model
#     embeddings = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")
# 
#     # Load and process the document
#     with open("temp.pdf", "wb") as f:
#         f.write(uploaded_file.getbuffer())
#     loader = SimpleDirectoryReader(input_files=["temp.pdf"])
#     documents = loader.load_data()
# 
#     # Convert documents to the required format
#     texts = [doc.text for doc in documents]
#     metadatas = [doc.metadata for doc in documents]
# 
#     # Create Chroma vector store
#     vector_store = Chroma.from_texts(texts=texts, metadatas=metadatas, embedding=embeddings)
# 
#     # Load the QA chain
#     qa_chain = RetrievalQA.from_chain_type(
#         llm=llm,
#         chain_type="stuff",
#         retriever=vector_store.as_retriever()
#     )
# 
#     # Display chat history
#     for message in st.session_state.messages:
#         with st.chat_message(message["role"]):
#             st.markdown(message["content"])
# 
#     # User input for query
#     if prompt := st.chat_input("What would you like to know about the Danish Refugee Council?"):
#         # Add user message to chat history
#         st.session_state.messages.append({"role": "user", "content": prompt})
# 
#         # Display user message
#         with st.chat_message("user"):
#             st.markdown(prompt)
# 
#         # Get the response
#         with st.chat_message("assistant"):
#             message_placeholder = st.empty()
#             full_response = ""
# 
#             # Simulate stream of response with milliseconds delay
#             for chunk in qa_chain.run(prompt).split():
#                 full_response += chunk + " "
#                 time.sleep(0.05)
#                 # Add a blinking cursor to simulate typing
#                 message_placeholder.markdown(full_response + "â–Œ")
# 
#             message_placeholder.markdown(full_response)
# 
#         # Add assistant response to chat history
#         st.session_state.messages.append({"role": "assistant", "content": full_response})
# 
# else:
#     st.write("Please upload a PDF file to proceed.")

from pyngrok import ngrok

# Replace 'YOUR_NGROK_AUTHTOKEN' with your actual Ngrok authtoken
ngrok.set_auth_token("Your API KEY")

# Run the Streamlit app in the background
!streamlit run app.py &>/dev/null&

# Start ngrok tunnel to the streamlit app
public_url = ngrok.connect(8501,'http')
print(f"Streamlit app is live at: {public_url}")

"""# For restarting the server"""

ngrok.disconnect(public_url)

ngrok.kill()